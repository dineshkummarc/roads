h2. Application Development

Up to now, we have only dealt with small examples which contained one or two functions. Real applications typically consist of a number of modules. We will show how to structure such applications.<br>
Real applications also distinguish between a _model_ which contains the application data and logic, and one or more _views_ which present the data to the user. The code in the <code>action</code> handlers, <code>bind</code> procedures and <code>validate</code> functions can be considered part of the _controller_: the glue code which handles user input and typically calls functions of the model layer. We will present two approaches how to separate model and views with Roads.<br>
For long running applications, it can be important to be able to update the code without any service interruption. This is very easy to implement with Roads.


h3. Application Configuration

As an example for this chapter, we introduce a simple poll application. This application has two types of users: administrators and normal users. Both normal users and admins may vote on polls. But only admins can create and delete polls and designate new admins.

h4. Installation

If you did not clone the complete Git-repository in the first chapter, you need to download and unpack two packages to try out the example application:

# "db-0.2.0.zip":http://github.com/wmeyer/roads/downloads/db-0.2.0.zip: a simple in-memory database system whhich is used by the example application
# "pollapp-0.2.0.zip":http://github.com/wmeyer/roads/downloads/pollapp-0.2.0.zip: the application itself

Build both packages with <code>./build.sh</code> in their respective directories.

To start the application, feed <code>/pollapp/OPI.oz</code> in the Mozart OPI and go to "http://localhost:8080/poll":http://localhost:8080/poll.

In <code>OPI.oz</code>, we see how an _application_ is registered, using the URL of the compiled functor which implements the application:
<pre><code>{Roads.registerApplication poll 'x-ozlib://wmeyer/pollapp/PollApp.ozf'}</code></pre>

An application in Roads is a mapping from path elements to functors, extended by optional special purpose functions (for initialization and shutdown) and exported options. A defining characteristic for applications is that all functions of one application share the same session instances. It is possible to run multiple applications at the same time, but these applications will never share any session data.<br>
If you use <code>registerFunction</code> or <code>registerFunctor</code>, all functions will belong to the same implicit default application.

The application definition in <code>PollApp.oz</code> starts with the mentioned functor mapping and setting of an option:
<pre><code>   Functors = unit('':'x-ozlib://wmeyer/pollapp/ShowPolls.ozf'
                   'admin':'x-ozlib://wmeyer/pollapp/Admin.ozf'
                  )
   PagesExpireAfter=0
</code></pre>

bq. We use absolute URLs with the scheme name "x-ozlib". To see how this is done, take a look at <code>makefile.oz</code> and <code>build.sh</code>.

The <code>ShowPoll</code> functor implements voting. Its functions are available at "http://localhost:8080/poll":http://localhost:8080/poll because it is assigned to the empty atom <code>''</code>. <code>Admin</code> implements creation and deletion of polls and other administrative tasks and is mapped to "http://localhost:8080/poll/admin":http://localhost:8080/poll/admin.

h4. Application-level options


- show and explain parts of PollApp.oz; explain app level configs and before, after
- explain differenz OPI.oz and standalone.oz


 h4. Interacting with a Model Layer and a Database
<a name="ctp"></a>

Working without spaces.

 h4. Hot Code Swapping


