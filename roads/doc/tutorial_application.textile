<notextile>
<link href="http://github.com/wmeyer/roads/raw/master/roads/doc/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="http://github.com/wmeyer/roads/raw/master/roads/doc/prettify.js"></script>
<script type="text/javascript" src="http://github.com/wmeyer/roads/raw/master/roads/doc/lang-oz.js"></script>
<script type="text/javascript" >
$(document).ready(function() {
   prettyPrint();
});
</script></notextile>

h1. Application Development

Up to now, we have only dealt with small examples which contained one or two functions. Real applications typically consist of a number of modules. We will show how to structure such applications.<br>
Real applications also distinguish between a _model_ which contains the application data and logic, and one or more _views_ which present the data to the user. The code in the <code>action</code> handlers, <code>bind</code> procedures and <code>validate</code> functions can be considered part of the _controller_: the glue code which handles user input and typically calls functions of the model layer. We will present two approaches how to separate model and views with Roads.<br>
For long running applications, it can be important to be able to update the code without any service interruption. This is very easy to implement with Roads.


h2. Contents

* "Application Configuration":#conf
** "Installation of the Example Application":#install
** "Init, OnRestart and ShutDown":#init
** "Global options":#global
** "Application-level options":#app
** "Functor-level options":#functor
** "Before and After":#before
* "Standalone applications (outside of the OPI)":#standalone
* "Hot Code Swapping":#swap
* "Calling the Model":#model
* "Conclusion":#conclusion

<a name="conf"></a>

h2. Application Configuration

As an example for this chapter, we introduce a simple poll application. This application has two types of users: administrators and normal users. Both normal users and admins may vote on polls. But only admins can create and delete polls and designate new admins.

<a name="install"></a>

h3. Installation of the Example Application

If you did not clone the complete Git-repository in the first chapter, you need to download and unpack two packages to try out the example application:

# "db-0.2.0.zip":http://github.com/wmeyer/roads/downloads/db-0.2.0.zip: a simple in-memory database system whhich is used by the example application
# "pollapp-0.2.0.zip":http://github.com/wmeyer/roads/downloads/pollapp-0.2.0.zip: the application itself

Build both packages with <code>./build.sh</code> in their respective directories.

To start the application, feed <code>/pollapp/OPI.oz</code> in the Mozart OPI and go to "http://localhost:8080/poll":http://localhost:8080/poll.

The default administrator account is "Admin" with the password "Admin".

In <code>OPI.oz</code>, we see how an _application_ is registered, using the URL of the compiled functor which implements the application:
<pre class="prettyprint lang-oz"><code>{Roads.registerApplication poll 'x-ozlib://wmeyer/pollapp/PollApp.ozf'}</code></pre>

An application in Roads is a mapping from path elements to functors, extended by optional special purpose functions (for initialization and shutdown) and exported options. A defining characteristic for applications is that all functions of one application share the same session instances. It is possible to run multiple applications at the same time, but these applications will never share any session data.<br>
If you use <code>registerFunction</code> or <code>registerFunctor</code>, all functions will belong to the same implicit default application.

The application definition in <code>PollApp.oz</code> starts with the mentioned functor mapping and setting of an option:
<pre class="prettyprint lang-oz"><code>   Functors = unit('':'x-ozlib://wmeyer/pollapp/ShowPolls.ozf'
                   'admin':'x-ozlib://wmeyer/pollapp/Admin.ozf'
                  )
   PagesExpireAfter=0
</code></pre>

bq. We use absolute URLs with the scheme name "x-ozlib". To see how this is done, take a look at <code>makefile.oz</code> and <code>build.sh</code>.

The <code>ShowPoll</code> functor implements voting. Its functions are available at "http://localhost:8080/poll":http://localhost:8080/poll because it is assigned to the empty atom <code>''</code>. <code>Admin</code> implements creation and deletion of polls and other administrative tasks and is mapped to "http://localhost:8080/poll/admin":http://localhost:8080/poll/admin.



h2. From here on, the documentation consists only of a rough draft!

<a name="init"></a>

h3. Init, OnRestart and ShutDown

<code>Init</code>: optional application function to initialize an application; although you can of course also do that with code executed in a functor at toplevel; returns a "session template", i.e. a session object with user-defined features. The data at these features will be available in every function of the application. Example:
<pre class="prettyprint lang-oz"><code>fun {Init}
   session(model:{Model.new})
end
</code></pre>

<code>OnRestart</code>: optional application function which is called when the server is restarted. Takes the original session template and returns an updated template. Example (not part of the actual example poll application):
<pre class="prettyprint lang-oz"><code>fun {OnRestart Session}
   session(model:{Model.updateFrom Session.model})
end
</code></pre>

<code>ShutDown</code>: optional application function which is called when the server is shut down (i.e. when {Roads.shutDown} is called). Example:
<pre class="prettyprint lang-oz"><code>proc {ShutDown Session}
   {Session.model shutDown}
end
</code></pre>
<br>

<a name="global"></a>

h3. Global options

Set with <code>Roads.setOption</code>.

* <code>logLevel</code>: nothing, error, debug, trace; default: trace
* <code>expireSessionsOnRestart</code>: bool; default: false; whether existing session shall expire when the server is restarted; interacts with the Sawhorse option keepAliveTimeout, i.e. for existing socket connections, the session will not expire on restart
* <code>sessionDuration</code>: milliseconds; how long are inactive sessions kept alive?; default: 1 hour
<br>

<a name="app"></a>

h3. Application-level options

Simply export the option and set the value in the functor body.

* <code>name</code>: application name as used in app log messages; default: app
* <code>logLevel</code>: log level for application loging; default: trace
* <code>pagesExpireAfter</code>: seconds from now that pages will expire; goes into the "Expires" HTTP header; default: 0
* <code>useTokenInLinks</code>: if set to false, links to procedure values will be shorter, but also slightly vulnerable to very determined CSRF attacks (the attacker still has to guess or brute-force a user-specific 32-bit value); default: true
* <code>mimeType</code>: see chapter [[Other Features]]
* <code>charset</code>: see chapter [[Other Features]]
* <code>forkedFunctions</code>: bool; whether subordinate spaces are used; for advanced users; setting this to false makes "bind" attributes pretty much unusable but allows side effects directly in user functions. Can be overridden for specific functions by using <code>fork(...)</code> in action handlers and hrefs.
<br>

h3. Functor-level options

Functor-level options override application-level options.

* <code>mimeType</code>: see chapter [[Other Features]]
* <code>charset</code>: see chapter [[Other Features]]

<a name="before"></a>

h3. Before and After

Functions exported as <code>before</code> and <code>after</code>. Available both for applications and functors. If a functor does not define them, the application definitions are used.

<code>Before</code> takes a session object and the user function that is about to be called. It returns the function that will actually be called. Useful for authentication.

Example:
<pre class="prettyprint lang-oz"><code>   %% Authentication
   fun {Before Session Fun}
      IsLoggedIn = {Session.memberShared user}
      LoggingIn = {Session.condGet loginInProgress false}
   in
      if IsLoggedIn orelse LoggingIn then Fun
      else %% let user log in and then show original page
         fun {$ Session} {Login Session Session.request.originalURI} end
      end
   end
</code></pre>

<code>After</code> takes a session object and the result of a user function (typically a HTML document or a fragment). It returns a postprocessed version of the user function result. Useful to add content that is common for all functions of an application or a functor.

Example (simplified from the example poll app):
<pre class="prettyprint lang-oz"><code>   %% Add list of links for logged-in users
   fun {After Session Doc}
      IsLoggedIn = {Session.memberShared user}
   in
      if {Not IsLoggedIn} then
	 html(
	    head(title("Poll application"))
	    body(Doc))
      else
	 html(
	    head(title("Show polls"))
	    body(
	       'div'(h3("Poll App")
		     hr
		     Doc
		     hr
		     'div'(a("Admin" href:url('functor':admin function:''))
			   a("View all polls"
			     href:url('functor':'' function:showAll))
			   a("Logout " # {Session.getShared user}.login
			     href:Logout)
			  )
		    )
	       )
	    )
      end
   end
</code></pre>

<a name="standalone"></a>

h2. Standalone applications (outside of the OPI)

Example:
<pre class="prettyprint lang-oz"><code>functor
import
   Roads at 'x-ozlib://wmeyer/roads/Roads.ozf'
define
   {Roads.registerApplication poll 'x-ozlib://wmeyer/pollapp/PollApp.ozf'}
   {Roads.run}
end
</code></pre>

<a name="swap"></a>

h2. Hot Code Swapping

bq. On Windows, you need this patch: "http://lists.gforge.info.ucl.ac.be/pipermail/mozart-hackers/2008/003072.html":http://lists.gforge.info.ucl.ac.be/pipermail/mozart-hackers/2008/003072.html. Alternatively, you can replace your <code>Mozart\platform\win32-i486\emulator.dll</code> with the one available at "http://code.google.com/p/oz-code/downloads/detail?name=emulator.zip&can=2&q=":http://code.google.com/p/oz-code/downloads/detail?name=emulator.zip&can=2&q=.

Just use <code>'x-ozlib://wmeyer/roads/TheRoads.ozf'</code> instead of <code>'x-ozlib://wmeyer/roads/Roads.ozf'</code>. If you start your application a second time, this will NOT try to create another server, but use the existing one and update the used application configuration and code for new sessions. Existing sessions will continue to use the old code (if not configured to expire on restart).

To check that it works, delete the session cookie in your browser (<code>roadsSession</code>), or use
<pre class="prettyprint lang-oz"><code>{TheRoads.setSawhorseOption keepAliveTimeout 0}
{TheRoads.setOption expireSessionsOnRestart true}
</code></pre>

Note that no <code>stdout</code> is available for an application that is started like this (internally uses an extra process). Therefore, Roads uses <code>"x-ozlib://wmeyer/sawhorse/sawhorse-log/http-error.log"</code> as the default log file in this case, which resolves to <code>"~/.oz/<version>/cache/x-ozlib/wmeyer/sawhorse/sawhorse-log/http-error.log"</code>.


<a name="model"></a>

h2. Calling the Model

<ul>
<li>User functions are always executed in subordinate spaces to make repeated execution of closures possible (in other words: nested user functions can read and set variables of their outer function(s) which is essential for <code>bind</code> attributes. Without subordinate spaces, every form using <code>bind</code> could only be submitted once which is against the spirit of web applications).
<li>From within subordinate spaces, only a limited set of side effects are possible. For example, global variables can not be manipulated and writing into files is not possible.
<li>Typical model code DOES need side effects like these.
<li>It IS possible to send messages to other threads from within subordinate spaces.
<li>The recommended approach is therefore to implement the model layer (or at least the interface of the model layer to the view) as active objects. We can call methods of active objects with the usual syntax. Internally, messages will be send to the thread(s) where the object(s) live.
<li>For usage in subordinate spaces, there are additional requirements. We can not send unbound variables to other threads, but we can still receive a result by using the Oz system function <code>Port.sendRecv</code>.
<li>Roads provides a function that creates a suitable active object from a class description that follows a certain protocol. See <code>roads/appSupport/ActiveObject.oz</code>.
<li>For an example usage, see <code>pollapp/Model.oz</code>.
</ul>
Extract:
<pre class="prettyprint lang-oz"><code>
   ...
   fun {NewModel}
      {ActiveObject.new Model init}
   end

   class Model
      feat
         db
         
      meth init
         self.db = {CreateDBServer}
         {self createAdmin}
      end

      meth shutDown
         {DBServer.shutDown self.db}
      end
      
      meth hasVotedOn(Login PollId result:Res)
         Res=
         case {self.db
               select(votedOn('*')
                      where:[[votedOn(user) '=' Login] 'AND' [votedOn(poll) '=' PollId]]
                      result:$)}
         of nil then false
         else true
         end
      end

      ...
</code></pre>

<a name="conclusion"></a>

h2. Conclusion

We recommend to study the poll application example in depth.
The actual application interface is implemented in <code>ShowPolls.oz</code> and <code>Admin.oz</code>. The code in these functors creates dynamic HTML pages from model data in a quite simple and elegant way, using functional programming idioms and Oz' succinct record syntax.

The following function from <code>Admin.oz</code> creates an unordered list of non-admin users. Each user name is rendered as a link which - when clicked - makes the user an admin and shows the updated list of non-admins:
<pre class="prettyprint lang-oz"><code>
   fun {MakeAdmin S}
      'div'(h1("Designate an Admin")
            {UL
             {Map {S.model allNonAdmins(result:$)}
              fun {$ user(login:L ...)}
                 a("User: " # L
                   href:fun {$ S}
                           {S.model makeAdmin(L)}
                           {MakeAdmin S}
                        end
                  )
              end
             }
            }
           )
   end
</code></pre>

h2. &nbsp;

Previous: [[Security]] &nbsp;&nbsp; Next: [[Other Features]]

"Wolfgang.Meyer@gmx.net":mailto:Wolfgang.Meyer@gmx.net
