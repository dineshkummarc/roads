h2. Other Features

<b>Draft version!</b>

Roads features which have not been discussed in other chapters.

h3. Sawhorse Configuration

* How to configure Roads' webserver.
* Look at <code>sawhorse/server/Configuration.oz</code>:

<pre><code>   ...
   Config = config(port:8080
                   requestTimeout: 300
                   keepAliveTimeout: 15
                   acceptTimeOut: 2*60*1000
                   documentRoot: "public_html"
                   directoryIndex: "index.html"
                   serverName: "localhost"
                   serverAlias: nil
                   typesConfig: "x-ozlib://wmeyer/sawhorse/mime.types"
                   defaultType: mimeType(text plain)
                   mimeTypes: mimeTypes
                   serverAdmin: "admin@localhost"
                   logDir: "sawhorse-log"
                   accessLogFile: "http-access.log"
                   accessLogLevel: trace
                   errorLogFile: stdout
                   errorLogLevel: trace
                   pluginDir: "x-ozlib://wmeyer/sawhorse/plugins"
                   plugins: unit
                  )
</code></pre>

Every option can be set like this: <code>{Roads.setSawhorseOption port 80}</code>.
You may also change the code directly and recompile if you want different defaults.


h3. Composable Form Parts

- thanks to bind and validate, like formlets

h3. Making Requests Bookmarkable

url(...)s

h3. Returning non-HTML from user functions
- strings -> served as HTML
- redirect(Code URL) or redirect(Code url(...))
- response(...)

h3. JavaScript

- validating javascript in prepare
- writing javascript In Oz

h3. JSON

h3. Ajax

* no special support for Ajax
* but also no obstacles if you want to use it
* Simple example: <code>roads/examples/Ajax.oz</code>, "http://localhost:8080/select":http://localhost:8080/select, example needs "javascript" package installed

h3. CSS

h3. Reading and Setting Cookies

* <code>{Session.hasCookie Key}</code>: check whether a certain cookie was sent with the current request
* <code>{Session.getCookie Key}</code>: get the value of a cookie as a string
* <code>{Session.getCookieExt Key}</code>: get the cookie as a value like <code>cookie(value:Val path:"/" domain:nil version:0)</code>. "path", "domain" and "version" will only be there if they were in the original cookie header.
* <code>{Session.setCookie Key Cookie}</code>: set a cookie to be send with the current response. "Cookie" may simply be a (virtual) string value. In this case, the cookie will have a  default path that limits it to the current application. Cookie may also be a value like <code>cookie(value:"String" path:"/" httpOnly:unit otherAttribute:"foobar")</code>.

h3. Controlling URL Expiration

* By default, all URLs are valid for the duration of a session (except for bookmarkable URLs).
* It is possible to expire URLs explicitly after a defined period of time or after a period of inactivity.
* <code>{Session.expireLinksAfter Milliseconds}</code> expires all URLs that are created from now on in the current function or in directly following functions, after a period of time.
* <code>{Session.expireLinksAfterInactivity Milliseconds}</code> does the same, but only if none of the links have been used for a period of time.
* <code>C = {Session.createContext}</code>: starts a context. You can explicitly expire all links collected in that context with <code>{C expire}</code>.


h3. Logging 

Functions <code>Session.logTrace</code> and <code>Session.logError</code> can be used to write log messages in the error log file (Sawhorse option <code>errorLogFile</code>). By default, these messages go to <code>stdout</code>.

Messages are filtered by the application-level option <code>logLevel</code>.


Previous: [[Application Development]] &nbsp;&nbsp; Next: [[The Future]]
