<notextile>
<link href="http://github.com/wmeyer/roads/raw/master/roads/doc/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="http://github.com/wmeyer/roads/raw/master/roads/doc/prettify.js"></script>
<script type="text/javascript" src="http://github.com/wmeyer/roads/raw/master/roads/doc/lang-oz.js"></script>
<script type="text/javascript" >
$(document).ready(function() {
   prettyPrint();
});
</script></notextile>

h1. Other Features

<b>Draft version!</b>

Roads features which have not been discussed in other chapters.

h2. Contents

* "Sawhorse Configuration":#sawhorse
* "Composable Form Parts":#cfp
* "Making Requests Bookmarkable":#mrb
* "Returning other Mime Types or HTML with a different charset":#rnh
* "Handling POST/GET parameters with multiple values":#mv
* "JavaScript":#js
* "JSON":#json
* "Ajax":#ajax
* "CSS":#css
* "Reading and Setting Cookies":#cookies
* "Controlling URL Expiration":#cue
* "Logging":#logging


<a name="sawhorse"></a>

h2. Sawhorse Configuration

* How to configure Roads' webserver.
* Take a look at <code>sawhorse/server/Configuration.oz</code>:

<pre class="prettyprint lang-oz"><code>   ...
   Config = config(port:8080
                   requestTimeout: 300
                   keepAliveTimeout: 15
                   acceptTimeout: 2*60*1000
                   processingTimeout: 10
                   documentRoot: "x-ozlib://wmeyer/sawhorse/public_html"
                   directoryIndex: "index.html"
                   serverName: "localhost"
                   serverAlias: nil
                   typesConfig: "x-ozlib://wmeyer/sawhorse/mime.types"
                   defaultType: mimeType(text plain)
                   serverAdmin: "admin@localhost"
                   logDir: "x-ozlib://wmeyer/sawhorse/sawhorse-log"
                   accessLogFile: "http-access.log"
                   accessLogLevel: trace
                   errorLogFile: stdout
                   errorLogLevel: trace
                   pluginDir: "x-ozlib://wmeyer/sawhorse/plugins"
                  )
</code></pre>

Every option can be set like this: <code>{Roads.setSawhorseOption port 80}</code>.
You may also change the code directly and recompile if you want different defaults.


<a name="cfp"></a>

h2. Composable Form Parts

* "Formlets in Links decouple user interface from data, a vital form of abstraction supported by very few web frameworks." ("An idiom's guide to formlets":http://homepages.inf.ed.ac.uk/wadler/papers/formlets/formlets.pdf [PDF])
* Roads: composibility of form parts is a natural result of <code>bind</code> and <code>validate</code> attributes and dataflow variables.
* Example from the paper above:

bq. "Say you want to present the user with an HTML form for entering
a pair of dates. In your initial design, a date is represented as a pair
of pulldown menus, one to select a month and one to select a day.
Later, you choose to replace each date by a single text field, for
entering a date as text."

* In Roads you can implement this simply by virtue of procedural abstraction.


<b>Example</b> (extract from <code>/roads/examples/DateExample.oz</code>) which lets the user enter a date by textual input and displays it back to them:
<pre class="prettyprint lang-oz"><code>...
fun {EnterDateSimple S}
   Date
in
   form({TextualDate 2009 2020 Date}
        input(type:submit value:"Submit date")
        method:post
        action:fun {$ _}
                  p("You entered " # Date.year # "-" # Date.month # "-" # Date.day # ".")
               end
       )
end

%% Res will contain the date after successfull submission.
fun {TextualDate FirstYear LastYear Res}
   D M
in
   'div'(input(type:text id:day
               validate:int_in(1 31) bind:D)
         input(type:text id:month
               validate:int_in(1 12) bind:M)
         input(type:text id:year
               validate:int_in(FirstYear LastYear)
               bind:proc {$ Y}
                       Res = date(day:D month:M year:Y)
                    end
              )
        )
end
...
</code></pre>

The abstraction works because <code>bind</code> can be set to a procedure. In this way we are able to compose the overall result from the various inputs.

It is now very easy to replace the call to <code>TextualInput</code> with a call to a different function which returns the HTML code for entering a date by pulldown menus (helper functions omitted):
<pre class="prettyprint lang-oz"><code>...
%% Enter a date with popup menus.
fun {SelectDate FirstYear LastYear Res}
   D M
in
   'div'({Selector 1 31 ?D}
         {Selector 1 12 ?M}
         {Selector FirstYear LastYear
          proc {$ Y}
             Res = date(day:D month:M year:Y)
          end
         }
        )
end
...
</code></pre>

The composibility stems from the fact that we don't need to use any explicit names to access input elements (avoids the danger of name clash) and that we can refer to the result of a group of input elements even before this result is known.

<a name="mrb"></a>

h2. Making Requests Bookmarkable

* If you use function values for <code>href</code> or <code>action</code> attributes, the resulting link will not be bookmarkable. It is only valid for the current user and only during the current session.
* To make bookmarkable URLs, you need to
# export the function, i.e. make it public
# use a normal URL in <code>href</code> or <code>action</code>, either by providing a string or using a <code>url(...)</code> record (see below)
# in forms: use <code>get</code> instead of <code>put</code>

* such bookmarkable links are not guarded against CSRF attacks; so they should not have side effect

* a <code>url(...)</code> record represents an URL to a Roads functions. Examples:
# <code>url(app:poll 'functor':admin function:makeAdmin)</code> represents <code>poll/admin/makeAdmin</code>.
# <code>url('functor':admin function:makeAdmin)</code> represents <code><current application>/admin/makeAdmin</code>.
# <code>url(function:makeAdmin)</code> represents <code><current application>/<current functor>/makeAdmin</code>.
# <code>url(function:makeAdmin extra:"?id=v%al")</code>: <code><current application>/<current functor>/makeAdmin?id=v%al</code>.
# <code>url(function:makeAdmin params:unit(id:"v%al"))</code>: <code><current application>/<current functor>/makeAdmin?id=v%25al</code> (param values are percent-encoded)


<a name="rnh"></a>

h2. Returning other Mime Types or HTML with a different charset

In all examples so long, we returned records that represent HTML. But you may also return:
* virtual strings; these will, by default, be served as HTML (wrt. the HTTP content type header) with charset IS0 8859-1, which is the default charset both for HTTP and Mozart/Oz.
* <code>redirect(Code URL)</code> or <code>redirect(Code url(...))</code>; creates a redirect response; for example <code>redirect(303 url(function:makeAdmin))</code>
* a <code>response(...)</code> record; in this case, Roads will only add cookies and otherwise send the response unmodified to the client.


You may also customize the mime type and charset that is used for functions that return HTML or virtual strings.
* Export a value like <code>MimeType = mimeType(text plain)</code> at the functor or application level. Changing this only makes sense for virtual strings, as the HTML generated by Roads is always HTML 4.01.
* Export a value like <code>Charset = "UTF-8"</code> at the functor or application level. You have to make sure that your functions actually return text with this encoding manually. For HTML, you have to use a charset that is compatible to ASCII, i.e. anything from the ISO 8859 family or UTF-8.


<a name="mv"></a>

h2. Handling POST/GET parameters with multiple values

If you expect a parameter to occur multiple times (e.g. in form submission with a multiple-selection element), use:
* <code>bind:list(Var)</code>
* <code>Var = {S.getParamAsList param}</code>
* <code>validate:list(Validator)</code>

Note that this will validate successfully even if NO or just one parameter value is available.

For a complete example, see <code>/roads/examples/MultipleSelection.oz</code>.


<a name="js"></a>

h2. JavaScript

* The best approach is probably to serve JavaScript code as separate files which are referenced in the HTML code.
* But you may also write JavaScript code as strings in Oz code.
* There is a package "javascript-0.2.0":http://github.com/wmeyer/roads/downloads/javascript-0.2.0.zip which offers some additional features:

<b>Check your Javascript code with "JSLint":http://www.jslint.com/</b>. JSLint in implemented in JavaScript. Roads uses either the "Windows Scripting Host" or "Rhino" (a JavaScript engine implemented in Java) to execute JSLint. WSH is usually installed by default. To install Rhino, <code>apt-get install rhino</code> should do the trick.

<b>Example</b> (<code>/roads/examples/Ajax.oz</code>):
<pre class="prettyprint lang-oz"><code>functor Ajax
...
require
   Javascript at 'x-ozlib://wmeyer/javascript/Javascript.ozf'
prepare
   JavaScriptCode =
   {Javascript.checked  %% takes a list of lines
    [
     "function onSelectChange() {"
     " var selected = $(\"#selector option:selected\").val();"
     " if(selected !== undefined && selected !== \"dummy\") {"
     "  $(\"#content\").load(\"info\", {type:selected});"
     " }"
     "}"
     ""
     "$(document).ready(function() {"
     "                   $(\"#selector\").change(onSelectChange);"
     "                  });"
    ]}
define   
...
</code></pre>

Note that we do the JavaScript check in the <code>prepare</code> section, so this will happen at compile time. If a problem is detected, compilation will abort with an error message.

<b>Writing Javascript In Oz</b>: This feature is rather a gimmick than a really useful tool ;-) Anyway it looks like this (<code>/roads/examples/Ajax2.oz</code>):
<pre class="prettyprint lang-oz"><code>functor Ajax
export
   Select
   Info
require
   Javascript at 'x-ozlib://wmeyer/javascript/Javascript.ozf'
prepare
   JavaScriptCode =
   {Javascript.convertAndCheck
    [
     function onSelectChange(nil)
     [
      var selected '=' '$'("#selector option:selected")#val(nil)';'
      'if'(selected '!==' undefined '&&' selected '!==' "dummy")
      [
       '$'("#content")#load("info" ',' object(type:selected))';'
      ]
     ]     
     jQuery(document)#ready(
                        function(nil)
                        [
                         '$'("#selector")#change(onSelectChange)';'
                        ])';'
    ]
   }
</code></pre>

It should be possible to figure out the syntax by comparing this example with the previous one.

Writing JavaScript like this might be useful if you construct the code programmatically. But be warned: embedding user input in JavaScript code is extremely dangerous (XSS attacks!).

<b>Embedding JavaScript in HTML</b>: Finally, you may embed the JavaScript-in-Oz code directly in the HTML structure (<code>/roads/examples/Ajax3.oz</code>):
<pre class="prettyprint lang-oz"><code>   fun {Select Session}
      html(
         head(
            title("Ajax example")
            %% load jQuery from Google
            script(type:"text/javascript"
                   src:"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"
                  )
            script(type:"text/javascript"
                   javascript(
                      function onSelectChange(nil)
                      [
                       var selected '=' '$'("#selector option:selected")#val(nil)';'
                       'if'(selected '!==' undefined '&&' selected '!==' "dummy")
                       [
                        '$'("#content")#load("info" ',' object(type:selected))';'
                       ]
                      ]
                      
                      jQuery(document)#ready(
                                         function(nil)
                                         [
                                          '$'("#selector")#change(onSelectChange)';'
                                         ])';'
                      )
                  )
            )
         body(
            h2("Simple Ajax Example")
            ...
         )
   end
</code></pre>


<a name="json"></a>

h2. JSON

* Library to convert Oz values to JSON (with UTF-8 encoding): "jzon-0.2.0":http://github.com/wmeyer/roads/downloads/jzon-0.2.0.zip.

<b>Example</b> (extract from <code>/roads/examples/JSON.oz</code>):
<pre><code class="prettyprint lang-oz">...
functor Info
import
   JSON at 'x-ozlib://wmeyer/jzon/JSON.ozf'
export
   '':Info
   MimeType
define
   MimeType = mimeType(application json)
   
   fun {Info S}
      {S.validateParameters [type]}
      {JSON.encode
       case {S.getParam type}.original
       of "sapiens" then object('from':200000 to:"now")
       [] "neanderthal" then object('from':400000 to:28000)
       [] "heidelberg" then object('from':600000 to:200000)
       [] "erectus" then object('from':1800000 to:40000)
       else null
       end
      }
   end
end
...
</code></pre>

<a name="ajax"></a>

h2. Ajax

* no special support for Ajax
* but also no obstacles if you want to use it
* Simple example: <code>roads/examples/Ajax.oz</code>, "http://localhost:8080/select":http://localhost:8080/select, example needs "javascript-0.2.0":http://github.com/wmeyer/roads/downloads/javascript-0.2.0.zip installed

<a name="css"></a>

h2. CSS

CSS code can be represented by Oz records and embedded in HTML.

<b>Example</b>:
<pre class="prettyprint lang-oz"><code> style(type:"text/css"
       css('div'#content
           'border-width':".2em"
           'border-style':solid
           'border-color':"#900"))
</code></pre>

Take a look at <code>sawhorse/common/Css.oz</code> to find out more about the syntax.


<a name="cookies"></a>

h2. Reading and Setting Cookies

* <code>{Session.hasCookie Key}</code>: check whether a certain cookie was sent with the current request
* <code>{Session.getCookie Key}</code>: get the value of a cookie as a string
* <code>{Session.getCookieExt Key}</code>: get the cookie as a value like <code>cookie(value:Val path:"/" domain:nil version:0)</code>. "path", "domain" and "version" will only be there if they were in the original cookie header.
* <code>{Session.setCookie Key Cookie}</code>: set a cookie to be send with the current response. "Cookie" may simply be a (virtual) string value. In this case, the cookie will have a  default path that limits it to the current application. Cookie may also be a value like <code>cookie(value:"String" path:"/" httpOnly:unit otherAttribute:"foobar")</code>.


<a name="cue"></a>

h2. Controlling URL Expiration

* By default, all URLs are valid for the duration of a session (except for bookmarkable URLs).
* It is possible to expire URLs explicitly after a defined period of time or after a period of inactivity.
* <code>{Session.expireLinksAfter Milliseconds}</code> expires all URLs that are created from now on in the current function or in directly following functions, after a period of time.
* <code>{Session.expireLinksAfterInactivity Milliseconds}</code> does the same, but only if none of the links have been used for a period of time.
* <code>C = {Session.createContext}</code>: starts a context. You can explicitly expire all links collected in that context with <code>{C expire}</code>.


<a name="logging"></a>

h2. Logging 

Functions <code>Session.logTrace</code> and <code>Session.logError</code> can be used to write log messages in the error log file (Sawhorse option <code>errorLogFile</code>). By default, these messages go to <code>stdout</code>.

Messages are filtered by the application-level option <code>logLevel</code>.


h2. &nbsp;

Previous: [[Application Development]] &nbsp;&nbsp; Next: [[Future Development]]

"Wolfgang.Meyer@gmx.net":mailto:Wolfgang.Meyer@gmx.net
